name: 'Make distribution'

on:
  push:
    tags:
      - '*'

jobs:
  createrelease:
    name: Create Release
    runs-on: [ubuntu-latest]
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt

  build:
    name: Build packages
    needs: createrelease
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            TARGET: macos
            CMD_BUILD: poetry run pyinstaller -F clim
            OUT_FILE_NAME: dist/clim
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: poetry run pyinstaller -F -c -n clim clim
            OUT_FILE_NAME: dist\clim.exe
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v1
    - name: 'Set up Python'
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: 'Install Poetry'
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: 'Install dependencies'
      run: poetry install --no-interaction --no-root
    - name: 'Generate version file'
      run: |
        VERSION=`git rev-parse --short HEAD`
        RELEASE_DATE=`date +"%Y-%m-%d"`
        echo -e "version = '$VERSION'\nrelease_date = '$RELEASE_DATE'" > codelimit/version.py
    - name: 'Build clim with pyinstaller for ${{matrix.TARGET}}'
      run: ${{matrix.CMD_BUILD}}
    - name: 'Release'
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          ${{ matrix.OUT_FILE_NAME }}
